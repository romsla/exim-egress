######################################################################
#                    MAIN CONFIGURATION SETTINGS                     #
######################################################################
#

disable_ipv6 = true

daemon_smtp_ports = 6025

domainlist  local_domains    = ${env{LOCAL_DOMAINS}{$value}{@}}
domainlist  relay_to_domains = ${env{RELAY_TO_DOMAINS}{$value}{}}
addresslist relay_to_users   = ${env{RELAY_TO_USERS}{$value}{}}
hostlist    relay_from_hosts = ${env{RELAY_FROM_HOSTS}{$value}{}}

acl_smtp_rcpt = acl_check_rcpt
acl_smtp_data = acl_check_data
tls_advertise_hosts =

never_users = root
#host_lookup = *
prdr_enable = true

log_selector = +smtp_protocol_error +smtp_syntax_error \
  +tls_certificate_verified

ignore_bounce_errors_after = 2d
timeout_frozen_after = 7d

message_size_limit = ${env{SIZE_LIMIT}{$value}{1M}}

keep_environment = LOCAL_DOMAINS : RELAY_FROM_HOSTS : RELAY_TO_DOMAINS : RELAY_TO_USERS : SMARTHOST : SMARTHOSTPORT : SMTP_PASSWORD : SMTP_USERDOMAIN : SMTP_USERNAME : SENDER_MASK : RATE_INTERVAL : RATE_VOLUME : RELAY_SPF_REGEX_DOMAIN : RELAY_MSGBODY_REGEX : RELAY_MSGSUBJ_REGEX : SIZE_LIMIT


######################################################################
#                       ACL CONFIGURATION                            #
#         Specifies access control lists for incoming SMTP mail      #
######################################################################

begin acl

acl_check_rcpt:

  deny    message       = Restricted characters in address
          domains       = +local_domains
          local_parts   = ^[.] : ^.*[@%!/|]

  deny    message       = Restricted characters in address
          domains       = !+local_domains
          local_parts   = ^[./|] : ^.*[@%!] : ^.*/\\.\\./
		  
  deny    message       = Sender Denied by Cloud Policy
		  senders = ! ${env{SENDER_MASK}{$value}{*}}
  

  deny	message       = Retry Denied by Cloud Policy
  !condition = ${if eq{${env{RATE_INTERVAL}{$value}{}}}{}}
  !condition = ${if eq{${env{RATE_VOLUME}{$value}{}}}{}}
  ratelimit = ${env{RATE_VOLUME}{$value}{}} / ${env{RATE_INTERVAL}{$value}{}} / strict  

  warn set acl_m_spf_record = ${lookup dnsdb{txt=$sender_address_domain}{$value}}
  !condition = ${if eq{${env{RELAY_SPF_REGEX_DOMAIN}{$value}{}}}{}}
  
  deny  message= Domain SPF not found by Cloud Policy
  !condition = ${if eq{${env{RELAY_SPF_REGEX_DOMAIN}{$value}{}}}{}}
        !condition = ${if def:acl_m_spf_record}
		
		
  deny  message = Domain SPF accepting all denied by Cloud Policy
  !condition = ${if eq{${env{RELAY_SPF_REGEX_DOMAIN}{$value}{}}}{}}
        condition = ${if match {$acl_m_spf_record}{\\+all}}
  
  deny message = Domain SPF not accepted by Cloud Policy
  !condition = ${if eq{${env{RELAY_SPF_REGEX_DOMAIN}{$value}{}}}{}}
        !condition = ${if match {$acl_m_spf_record}{${env{RELAY_SPF_REGEX_DOMAIN}{$value}{}}}}

  accept  hosts         = +relay_from_hosts
          domains       = +relay_to_domains
         control       = dkim_disable_verify

  accept  hosts         = +relay_from_hosts
          recipients    = +relay_to_users
          control       = dkim_disable_verify

  accept  authenticated = *
          control       = dkim_disable_verify

  require message = relay not permitted
          domains = +local_domains

  require verify = recipient
  
  accept


acl_check_data:


  deny message  = maximum allowed line length is 998 octets, \
                       got $max_received_linelength
          condition  = ${if > {$max_received_linelength}{998}}
  
  deny message = Subject Denied by Cloud Policy
  !condition = ${if match {$header_subject:}{${env{RELAY_MSGSUBJ_REGEX}{$value}{}}}}
  
  deny message = Content Denied by Cloud Policy
  !condition = ${if match {$message_body}{${env{RELAY_MSGBODY_REGEX}{$value}{}}}}

  accept



######################################################################
#                      ROUTERS CONFIGURATION                         #
#               Specifies how addresses are handled                  #
######################################################################
#     THE ORDER IN WHICH THE ROUTERS ARE DEFINED IS IMPORTANT!       #
# An address is passed to each router in turn until it is accepted.  #
######################################################################

begin routers




dnslookup:
  driver = dnslookup
  domains = ! +local_domains
  transport = remote_smtp
# ignore_target_hosts = 0.0.0.0 : 127.0.0.0/8
# if ipv6-enabled then instead use:
  ignore_target_hosts = <; 0.0.0.0 ; 127.0.0.0/8 ; ::1
  condition = ${if eq{${env{SMARTHOST}{$value}{}}}{}}
  senders =  ${env{SENDER_MASK}{$value}{*}}
  no_more


smarthost:
  driver = manualroute
  domains = ! +local_domains
  transport = remote_smtp
  route_data = ${env{SMARTHOST}{$value}{smarthost}} byname
  ignore_target_hosts = <; 0.0.0.0 ; 127.0.0.0/8 ; ::1
  condition = ${if !eq{${env{SMARTHOST}{$value}{}}}{}}
  senders =  ${env{SENDER_MASK}{$value}{*}}
  no_more


  router_for_special_domain_sender:
     driver = dnslookup
     senders =  ${env{SENDER_MASK}{$value}{*}}
	 ignore_target_hosts = 0.0.0.0 : 127.0.0.0/8
     transport = remote_smtp
     no_more 
	 
  

######################################################################
#                      TRANSPORTS CONFIGURATION                      #
######################################################################
#                       ORDER DOES NOT MATTER                        #
#     Only one appropriate transport is called for each delivery.    #
######################################################################

begin transports


remote_smtp:
  driver = smtp
  port = ${env{SMARTHOSTPORT}{$value}{}}
  message_size_limit = ${if > {$max_received_linelength}{998} {1}{0}}
  # Set to '*' (auth for all smarthosts)  if the SMTP_PASSWORD secret file or env variable exists, otherwise set to '' (no auth)
  hosts_require_auth = ${if or{ {exists{/run/secrets/SMTP_PASSWORD}} {!eq{${env{SMTP_PASSWORD}{$value}{}}}{}} } {*} {}}


local_delivery:
  driver = appendfile
  file = /var/mail/$local_part
  delivery_date_add
  envelope_to_add
  return_path_add


address_pipe:
  driver = pipe
  return_output


address_file:
  driver = appendfile
  delivery_date_add
  envelope_to_add
  return_path_add

address_reply:
  driver = autoreply



######################################################################
#                      RETRY CONFIGURATION                           #
######################################################################

begin retry

# This single retry rule applies to all domains and all errors. It specifies
# retries every 15 minutes for 2 hours, then increasing retry intervals,
# starting at 1 hour and increasing each time by a factor of 1.5, up to 16
# hours, then retries every 6 hours until 4 days have passed since the first
# failed delivery.

# WARNING: If you do not have any retry rules at all (this section of the
# configuration is non-existent or empty), Exim will not do any retries of
# messages that fail to get delivered at the first attempt. The effect will
# be to treat temporary errors as permanent. Therefore, DO NOT remove this
# retry rule unless you really don't want any retries.

# Address or Domain    Error       Retries
# -----------------    -----       -------

*                      *           F,2h,15m; G,16h,1h,1.5; F,4d,6h



######################################################################
#                      REWRITE CONFIGURATION                         #
######################################################################

# There are no rewriting specifications in this default configuration file.

begin rewrite



######################################################################
#                   AUTHENTICATION CONFIGURATION                     #
######################################################################

# The following authenticators support plaintext username/password
# authentication using the standard PLAIN mechanism and the traditional
# but non-standard LOGIN mechanism, with Exim acting as the server.
# PLAIN and LOGIN are enough to support most MUA software.
#
# These authenticators are not complete: you need to change the
# server_condition settings to specify how passwords are verified.
# They are set up to offer authentication to the client only if the
# connection is encrypted with TLS, so you also need to add support
# for TLS. See the global configuration options section at the start
# of this file for more about TLS.
#
# The default RCPT ACL checks for successful authentication, and will accept
# messages from authenticated users from anywhere on the Internet.

begin authenticators

LOGIN:
  driver           = plaintext
  public_name      = LOGIN
  # Username is from SMTP_USERNAME env variable.  Password is from SMTP_PASSWORD docker secret file if it exists, or from SMTP_PASSWORD env variable
  client_send      = ": ${env{SMTP_USERNAME}{$value} fail } : ${if exists{/run/secrets/passwd} {${readfile{/run/secrets/passwd}}} {${env{SMTP_PASSWORD}{$value}fail}} }"
  # Only enabled if SMTP_PASSWORD secret file of env variable exists
  client_condition = ${if or{ {exists{/run/secrets/passwd}} {!eq{${env{SMTP_PASSWORD}{$value}{}}}{}} } {true} {false}}

PLAIN:
  driver           = plaintext
  public_name      = PLAIN
  # Username is from SMTP_USERNAME env variable.  Password is from SMTP_PASSWORD docker secret file if it exists, or from SMTP_PASSWORD env variable
  client_send      = "^${env{SMTP_USERNAME}{$value} fail }^${if exists{/run/secrets/passwd} {${readfile{/run/secrets/passwd}}} {${env{SMTP_PASSWORD}{$value}fail}} }"
  # Only enabled if SMTP_PASSWORD secret file of env variable exists
  client_condition = ${if or{ {exists{/run/secrets/passwd}} {!eq{${env{SMTP_PASSWORD}{$value}{}}}{}} } {true} {false}}

#NTLM:
#  driver = spa
#  client_username = msn/msn_username
#  client_password = ${readfile{/run/secrets/passwd}}
#  client_domain = DOMAIN_OR_UNSET

NTLM:
  driver = spa
  # Username is from SMTP_USERNAME env variable.
  client_username  = ${env{SMTP_USERDOMAIN}{$value/}{}}${env{SMTP_USERNAME}{$value} fail }
  # Password is from SMTP_PASSWORD docker secret file if it exists, or from SMTP_PASSWORD env variable
  client_password  = ${if exists{/run/secrets/passwd} {${readfile{/run/secrets/passwd}}} {${env{SMTP_PASSWORD}{$value}{}}} }
  client_domain    = ${env{SMTP_USERDOMAIN}{$value} {} }
  # Only enabled if SMTP_PASSWORD secret file of env variable exists
  client_condition = ${if or{ {exists{/run/secrets/passwd}} {!eq{${env{SMTP_PASSWORD}{$value}{}}}{}} } {true} {false}}

######################################################################
#                   CONFIGURATION FOR local_scan()                   #
######################################################################

# If you have built Exim to include a local_scan() function that contains
# tables for private options, you can define those options here. Remember to
# uncomment the "begin" line. It is commented by default because it provokes
# an error with Exim binaries that are not built with LOCAL_SCAN_HAS_OPTIONS
# set in the Local/Makefile.

# begin local_scan


# End of Exim configuration file
